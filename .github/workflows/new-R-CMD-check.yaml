# This code is based on https://github.com/r-lib/actions/blob/v2.2.2/examples/check-standard.yaml
#
# The main differences are:
# 1. This is a "call-only" workflow.  Details of when to run it are left to the caller.
# 2. All the steps have been given names.
# 3. Steps have been added to (conditionally) install LaTeX and needed LaTeX packages.
# 4. A step has been added to compute what argument values to pass to the "check-r-package" action.
# 5. [error-on?]

on:
  workflow_call:
    inputs:
      strategy-matrix:
        type: string
      check-manual:
        type: boolean
      run-tests:
        type: boolean
      check-examples:
        type: boolean
      check-vignettes:
        type: boolean
      debug:
        type: boolean
        default: true

name: R-CMD-check-revised

env:

  # LaTeX is need for both the manual and the vignettes.  Only the
  # vignettes need the extra LaTeX packages.  Non-manual runs
  # automatically build both.
  
  NEED_TEX: ${{ inputs.check-manual || inputs.check-vignettes }}
  NEED_TEX_EXTRAS: ${{ inputs.check-vignettes }}

jobs:

  Echo-inputs:
    runs-on: ubuntu-latest
    steps:
      - run: |
          echo strategy-matrix ${{ inputs.strategy-matrix }}
          echo check-manual ${{ inputs.check-manual }}
          echo run-tests ${{ inputs.run-tests }}
          echo check-examples ${{ inputs.check-examples }}
          echo check-vignettes ${{ inputs.check-vignettes }}
        if: inputs.debug

  Show-current-strategy-matrix-values:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(inputs.strategy-matrix) }}
    steps:
      - run: |
          echo os ${{ matrix.os }}
          echo R version ${{ matrix.r }}
        if: inputs.debug

  R-CMD-check:
    name: Check R package on ${{ matrix.os }} using R version ${{ matrix.r }}

    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(inputs.strategy-matrix) }}

    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
      R_KEEP_PKG_SOURCE: yes

    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      # REMOVE THIS LATER!!!
      - name: Read
        if: inputs.debug
        run: |
          cat DESCRIPTION
          echo "github.event_name: ${{ github.event_name }}"
          echo "NEED_TEX: $NEED_TEX"
          echo "NEED_TEX_EXTRAS: $NEED_TEX_EXTRAS"

      - name: Install Pandoc
        uses: r-lib/actions/setup-pandoc@v2

      - name: Set up R
        uses: r-lib/actions/setup-r@v2
        with:
          r-version: ${{ matrix.r }}
          http-user-agent: ${{ matrix.http-user-agent }}
          use-public-rspm: true

      - uses: r-lib/actions/setup-r-dependencies@v2
        with:
          extra-packages: any::rcmdcheck
          needs: check

      - name: Install TinyTex
        if: env.NEED_TEX == 'true'
        uses: r-lib/actions/setup-tinytex@v2

      - name: debug 1
        if: inputs.debug
        run: |
          echo "inputs.check-vignettes: ${{ inputs.check-vignettes }}"
          echo "inputs.check-vignettes == true: ${{ inputs.check-vignettes == true }}"
          echo "inputs.check-vignettes == 'true': ${{ inputs.check-vignettes == 'true' }}"
          echo "inputs.check-vignettes == false: ${{ inputs.check-vignettes == false }}"
          echo "inputs.check-vignettes == 'false': ${{ inputs.check-vignettes == 'false' }}"

      - name: debug 2
        if: inputs.check-vignettes
        run: |
          echo "debug 2 ran"

      - name: debug 3
        if: ${{ inputs.check-vignettes }}
        run: |
          echo "debug 3 ran"

      - name: debug 4
        if: ${{ inputs.check-vignettes == true }}
        run: |
          echo "debug 4 ran"

      - name: debug 5
        if: ${{ inputs.check-vignettes == 'true' }}
        run: |
          echo "debug 5 ran"

      - name: debug 6
        if: ${{ inputs.check-vignettes == false }}
        run: |
          echo "debug 6 ran"

      - name: debug 7
        if: ${{ inputs.check-vignettes == 'false' }}
        run: |
          echo "debug 7 ran"

      - name: Install extra LaTeX packages
        if: env.NEED_TEX_EXTRAS == 'true'
        run: |

          # Install the tinytex R package to run tinytex::pdflatex.
          install.packages('tinytex')

          # Iterate through Rnw vignettes to find what LaTeX packages
          # need to be installed and install them.

          Rnw_files <- list.files('vignettes', pattern = '*.Rnw')
          lapply(Rnw_files, function(Rnw_file) {
            # Turn off evaluation of code chucks to avoid an error
            # about BioCro not being installed:
            knitr::opts_chunk$set(eval = FALSE)

            # Build the LaTeX file but don't compile it yet:
            xfun::in_dir('vignettes', tools::buildVignette(Rnw_file, latex = FALSE))

            # Get the name of the LaTeX file just created:
            LaTeX_file <- paste0(tools::file_path_sans_ext(Rnw_file), '.tex')

            # Compile the LaTeX file using tinytex::pdflatex because
            # this will automatically install any required LaTeX
            # packages that may be missing from the default TinyTex
            # installation.  These builds will likely fail (hence the
            # "try()", but not before installing needed LaTeX
            # packages:
            try(xfun::in_dir('vignettes', tinytex::pdflatex(LaTeX_file)))
          })

        shell: Rscript {0}

      - name: Compute check args
        run: |
          build_args_value <- c()
          args_value <- c('--as-cran')
          if ('${{ needs.get_configuration.outputs.check-manual }}' == 'false') {
            build_args_value <- append(build_args_value, '--no-manual')
            args_value <- append(args_value, '--no-manual')
          }
          if ('${{ needs.get_configuration.outputs.check-vignettes }}' == 'false') {
            build_args_value <- append(build_args_value, '--no-build-vignettes')
            args_value <- append(args_value, '--ignore-vignettes')
          }
          if ('${{ needs.get_configuration.outputs.run-tests }}' == 'false') {
            args_value <- append(args_value, '--no-tests')
          }
          if ('${{ needs.get_configuration.outputs.check-examples }}' == 'false') {
            args_value <- append(args_value, '--no-examples')
          }

          # serialize these vectors as strings:
          build_args <- paste0('c("', paste(build_args_value, collapse = '", "'), '")')
          args <- paste0("c('", paste(args_value, collapse = "', '"), "')")

          # store these in the environment
          system(sprintf('echo "BUILD_ARGS=\'%s\'" >> $GITHUB_ENV', build_args))
          system(sprintf('echo "ARGS=\'%s\'" >> $GITHUB_ENV', args))
        shell: Rscript {0}

      - name: Check package
        uses: r-lib/actions/check-r-package@v2
        with:
          upload-snapshots: true
          args: ${{ env.ARGS }}
          build_args: ${{ env.BUILD_ARGS }}
          error-on: '"error"'
